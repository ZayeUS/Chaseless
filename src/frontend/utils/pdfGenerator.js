// File: src/frontend/utils/pdfGenerator.js
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

/** Helper: convert hex to [r,g,b] */
const hex2rgb = hex => {
  const c = hex.replace('#','');
  const n = parseInt(c,16);
  return [(n>>16)&255, (n>>8)&255, n&255];
};

export const generateInvoicePdf = async (invoice, stripeUrl) => {
  const doc = new jsPDF();
  const { width: pw, height: ph } = doc.internal.pageSize;

  const primary   = '#4A5568',
        secondary = '#48BB78',
        lightGray = '#F7FAFC',
        textP     = '#2D3748',
        textS     = '#718096',
        divider   = '#E2E8F0',
        white     = '#FFFFFF',
        errorC    = '#E53E3E';

  const setFill = c => doc.setFillColor(...hex2rgb(c));
  const setDraw = c => doc.setDrawColor(...hex2rgb(c));
  const setText = c => doc.setTextColor(...hex2rgb(c));

  // Footer drawer
  const drawFooter = () => {
    const pages = doc.internal.getNumberOfPages();
    doc.setFont('helvetica','normal').setFontSize(8).setTextColor(...hex2rgb(textS));
    for (let i = 1; i <= pages; i++) {
      doc.setPage(i);
      doc.text('Note: Online payments incur a 3% processing fee.', 14, ph - 28, { maxWidth: pw - 28 });
      doc.text('To pay by check, please contact us directly.', 14, ph - 22, { maxWidth: pw - 28 });
      doc.text('Invoice generated by ChaseLess', pw/2, ph - 14, { align:'center' });
      doc.text(`Page ${i} of ${pages}`, pw - 14, ph - 10, { align:'right' });
    }
  };

  // 1) Header & logo
  let tx = 14;
  if (invoice.user_avatar_url) {
    try {
      const img = await fetch(invoice.user_avatar_url).then(r=>r.blob()).then(b=>new Promise((res,rej)=>{
        const r2 = new FileReader();
        r2.onloadend = ()=>res(r2.result);
        r2.onerror = rej;
        r2.readAsDataURL(b);
      }));
      doc.addImage(img,'PNG',14,15,20,20);
      tx = 40;
    } catch {}
  }
  doc.setFont('helvetica','bold').setFontSize(14).setTextColor(...hex2rgb(textP))
    .text(`${invoice.user_first_name} ${invoice.user_last_name}`, tx, 25);
  doc.setFontSize(28).setTextColor(...hex2rgb(primary))
    .text('INVOICE', pw - 14, 28, { align:'right' });

  // 2) Client & meta
  setDraw(divider);
  doc.line(14, 40, pw - 14, 40);

  doc.setFontSize(9).setTextColor(...hex2rgb(textS)).text('BILLED TO:', 14, 48);
  doc.setFont('helvetica','bold').setFontSize(10).setTextColor(...hex2rgb(textP))
    .text(invoice.client_name, 14, 54);
  doc.setFont('helvetica','normal').setFontSize(9).setTextColor(...hex2rgb(textS))
    .text(invoice.client_email, 14, 60);
  if (invoice.client_address) {
    const lines = doc.splitTextToSize(invoice.client_address, pw - 28);
    doc.text(lines, 14, 66);
  }

  autoTable(doc, {
    startY: 48,
    margin: { left: pw - 94 },
    theme: 'plain',
    head: [['Invoice #','Issue Date','Due Date']],
    body: [[
      `#${invoice.invoice_number}`,
      new Date(invoice.issue_date).toLocaleDateString(),
      new Date(invoice.due_date).toLocaleDateString()
    ]],
    headStyles: { fillColor: hex2rgb(primary), textColor:hex2rgb(white), fontStyle:'bold', halign:'center' },
    styles: { textColor:hex2rgb(textS), fontSize:9 }
  });

  // 3) Watermark
  if (['paid','overdue'].includes(invoice.status)) {
    doc.setFont('helvetica','bold').setFontSize(72)
      .setTextColor(...hex2rgb(invoice.status==='paid'?secondary:errorC));
    doc.saveGraphicsState();
    doc.setGState(new doc.GState({ opacity:0.05 }));
    doc.text(invoice.status.toUpperCase(), pw/2, ph/2, { align:'center', angle:45 });
    doc.restoreGraphicsState();
  }

  // 4) Items
  const rows = invoice.items.map(i => [
    i.description,
    parseFloat(i.quantity).toFixed(2),
    `$${parseFloat(i.unit_price).toFixed(2)}`,
    `$${(parseFloat(i.quantity)*parseFloat(i.unit_price)).toFixed(2)}`
  ]);

  autoTable(doc, {
    startY: 80,
    head: [['Description','Qty','Rate','Amount']],
    body: rows,
    theme: 'grid',
    headStyles: { fillColor:hex2rgb(primary), textColor:hex2rgb(white), fontStyle:'bold' },
    alternateRowStyles: { fillColor:hex2rgb(lightGray) },
    columnStyles: {
      0:{ cellWidth:88 },
      1:{ halign:'right' },
      2:{ halign:'right' },
      3:{ halign:'right', fontStyle:'bold' }
    },
    margin: { left:14, right:14 },
    didDrawPage: drawFooter
  });

  // 5) Totals
  const fy = doc.lastAutoTable.finalY + 10;
  const subtotal = invoice.items.reduce((s,i)=>s + parseFloat(i.quantity)*parseFloat(i.unit_price),0);
  setDraw(divider);
  doc.line(14, fy, pw - 14, fy);
  doc.setFont('helvetica','normal').setFontSize(10).setTextColor(...hex2rgb(textS))
    .text('Subtotal', pw - 50, fy + 6, { align:'right' });
  doc.setTextColor(...hex2rgb(textP))
    .text(`$${subtotal.toFixed(2)}`, pw - 14, fy + 6, { align:'right' });
  setFill(lightGray);
  doc.rect(pw - 90, fy + 12, 76, 12, 'F');
  doc.setFont('helvetica','bold').setFontSize(12).setTextColor(...hex2rgb(primary))
    .text('Total Due', pw - 50, fy + 20, { align:'right' });
  doc.text(`$${parseFloat(invoice.total_amount).toFixed(2)}`, pw - 14, fy + 20, { align:'right' });

  // 6) Notes
  let ny = fy + 30;
  if (invoice.notes) {
    doc.setFont('helvetica','bold').setFontSize(10).setTextColor(...hex2rgb(textP)).text('Notes',14,ny);
    doc.setFont('helvetica','normal').setFontSize(9).setTextColor(...hex2rgb(textS));
    const nlines = doc.splitTextToSize(invoice.notes, pw - 28);
    doc.text(nlines,14,ny+6);
    ny += nlines.length * 6 + 6;
  }

  // 7) Pay Now button
  if (!['paid','void'].includes(invoice.status)) {
    const w=64, h=12, x=(pw-w)/2, y=ph-50;
    setFill(secondary);
    doc.roundedRect(x,y,w,h,3,3,'F');
    doc.setFont('helvetica','bold').setFontSize(12).setTextColor(...hex2rgb(white));
    doc.textWithLink('Pay Now', x+w/2, y+8, { align:'center', url: stripeUrl });
  }

  doc.save(`Invoice-${invoice.invoice_number}.pdf`);
};
